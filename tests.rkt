#lang racket

(require "programs.rkt")
(require rackunit)

(test-case "Chapter 1"
  (check-true  (atom? 'atom))
  (check-true  (atom? 1492))
  (check-true  (atom? '*abc?))
  (check-false (atom? '()))
  (check-false (atom? '(1 2 3))))

(test-case "Chapter 2"
  (check-true  (lat? '(Jack Sprat could eat no chicken fat)))
  (check-false (lat? '((Jack) Sprat could eat no chicken fat)))
  (check-false (lat? '(Jack (Sprat could) eat no chicken fat)))
  (check-true  (lat? '()))

  (check-true  (member? 'tea     '(coffee tea or milk)))
  (check-false (member? 'poached '(fried eggs and scrambled eggs)))
  (check-true  (member? 'meat    '(mashed potatoes and meat gravy)))
  (check-false (member? 'liver   '(bagels and lox))))

(test-case "Chapter 3"
  (check-equal? (rember 'mint '(lamb chops and mint jelly))
                              '(lamb chops and      jelly))
  (check-equal? (rember 'mint '(lamb chops and mint flavored mint jelly))
                              '(lamb chops and      flavored mint jelly))
  (check-equal? (rember 'toast '(bacon lettuce and tomato))
                               '(bacon lettuce and tomato))
  (check-equal? (rember 'cup '(coffee cup tea cup and hick cup))
                             '(coffee     tea cup and hick cup))
  (check-equal? (rember 'and '(bacon lettuce and tomato))
                             '(bacon lettuce     tomato))

  (check-equal? (firsts '((apple peach pumpkin)
                          (plum pear cherry)
                          (grape raisin pea)
                          (bean carrot eggplant)))
                '(apple plum grape bean))
  (check-equal? (firsts '((a b) (c d) (e f)))
                        '( a     c     e   ))
  (check-equal? (firsts '()) '())
  (check-equal? (firsts '((five plums)
                          (four)
                          (eleven green oranges)))
                '(five four eleven))
  (check-equal? (firsts '(((five plums) four)
                          (eleven green oranges)
                          ((no) more)))
                '((five plums) eleven (no)))

  (check-equal? (insertR 'topping 'fudge '(ice cream with fudge         for dessert))
                                         '(ice cream with fudge topping for dessert))
  (check-equal? (insertR 'jalapeño 'and '(tacos tamales and          salsa))
                                        '(tacos tamales and jalapeño salsa))
  (check-equal? (insertR 'e 'd '(a b c d   f g d h))
                               '(a b c d e f g d h))

  (check-equal? (insertL 'e 'd '(a b c   d f g d h))
                               '(a b c e d f g d h))

  (check-equal? (subst 'e 'd '(a b c d f g d h))
                             '(a b c e f g d h))
  (check-equal? (subst 'topping 'fudge '(ice cream with fudge   for dessert))
                                       '(ice cream with topping for dessert))

  (check-equal? (subst2 'vanilla 'chocolate 'banana '(banana  ice cream with chocolate topping))
                                                    '(vanilla ice cream with chocolate topping))

  (check-equal? (multirember 'cup '(coffee cup tea cup and hick cup))
                                  '(coffee     tea     and hick    ))
  (check-equal? (multiinsertR 'e 'd '(a b c d   f g d   h))
                                    '(a b c d e f g d e h))
  (check-equal? (multiinsertL 'e 'd '(a b c   d f g   d h))
                                    '(a b c e d f g e d h))
  (check-equal? (multisubst 'e 'd '(a b c d f g d h))
                                  '(a b c e f g e h)))

(test-case "Chapter 4"
  (check-equal? (plus 46 12) 58)
  (check-equal? (minus 14 3) 11)
  (check-equal? (minus 17 9)  8)
  (check-equal? (addtup '(3 5 2 8)) 18)
  (check-equal? (addtup '(15 6 7 12 3)) 43)
  (check-equal? (× 5 3) 15)
  (check-equal? (× 13 4) 52)
  (check-equal? (× 12 3) 36)
  (check-equal? (tup+ '(3 6 9 11 4) '(8 5 2 0 7)) '(11 11 11 11 11))
  (check-equal? (tup+ '(2 3) '(4 6)) '(6 9))
  (check-equal? (tup+ '(3 7) '(4 6)) '(7 13))
  (check-equal? (tup+ '(3 7) '(4 6 8 1)) '(7 13 8 1))
  (check-equal? (tup+ '(3 7 8 1) '(4 6)) '(7 13 8 1))
  (check-false  (> 12 133))
  (check-true   (> 120 11))
  (check-false  (> 6 6))
  (check-true   (< 4 6))
  (check-false  (< 8 3))
  (check-false  (< 6 6))
  (check-equal? (↑ 1 1) 1)
  (check-equal? (↑ 2 3) 8)
  (check-equal? (↑ 5 3) 125)
  (check-equal? (÷ 15 4) 3)
  (check-equal? (length '(hotdogs with mustard sauerkraut and pickles)) 6)
  (check-equal? (length '(ham and cheese on rye)) 5)
  (check-equal? (pick 4 '(lasagna spaghetti ravioli macaroni meatball)) 'macaroni)
  (check-equal? (rempick 3 '(hotdogs with hot mustard)) '(hotdogs with mustard))
  (check-equal? (no-nums '(5 pears 6 prunes 9 dates)) '(pears prunes dates))
  (check-true   (eqan? 14 14))
  (check-false  (eqan? 13 15))
  (check-true   (eqan? 'b 'b))
  (check-false  (eqan? 'a 'c))
  (check-false  (eqan? 'x 10))
  (check-false  (eqan? 20 'y))
  (check-equal? (occur 5 '(5 a 1 b 2 c 3 d 5 e 5)) 3)
  (check-equal? (occur 5 '(x a 1 b 2 c 3 d x e x)) 0)
  (check-false  (one? 0))
  (check-true   (one? 1))
  (check-false  (one? 2))
  (check-equal? (one?-based-rempick 3 '(lemon meringue salty pie)) '(lemon meringue pie)))

(test-case "Chapter 5"
  (check-equal? (rember* 'cup '((coffee) cup ((tea) cup) (and (hick)) cup))
                              '((coffee)     ((tea)    ) (and (hick))    ))
  (check-equal? (rember* 'sauce '(((tomato sauce)) ((bean) sauce) (and ((flying)) sauce)))
                                '(((tomato      )) ((bean)      ) (and ((flying))      )))
  (check-equal? (insertR* 'roast 'chuck '((how much (wood))
                                          could
                                          ((a (wood) chuck))
                                          (((chuck)))
                                          (if (a) ((wood chuck)))
                                          could chuck wood))
                '((how much (wood))
                  could
                  ((a (wood) chuck roast))
                  (((chuck roast)))
                  (if (a) ((wood chuck roast)))
                  could chuck roast wood))
  (check-equal? (occur* 'banana '((banana)
                                  (split ((((banana ice)))
                                          (cream (banana))
                                          sherbet))
                                  (banana)
                                  (bread)
                                  (banana brandy)))
                5)
  (check-equal? (subst* 'orange 'banana '((banana)
                                          (split ((((banana ice)))
                                                  (cream (banana))
                                                  sherbet))
                                          (banana)
                                          (bread)
                                          (banana brandy)))
                '((orange)
                  (split ((((orange ice)))
                          (cream (orange))
                          sherbet))
                  (orange)
                  (bread)
                  (orange brandy)))
  (check-equal? (insertL* 'pecker 'chuck '((how much (wood))
                                           could
                                           ((a (wood) chuck))
                                           (((chuck)))
                                           (if (a) ((wood chuck)))
                                           could chuck wood))
                '((how much (wood))
                  could
                  ((a (wood) pecker chuck))
                  (((pecker chuck)))
                  (if (a) ((wood pecker chuck)))
                  could pecker chuck wood))
  (check-true  (member* 'chips '((potato) (chips ((with) fish) (chips)))))
  (check-false (member* 'abcde '((potato) (chips ((with) fish) (chips)))))
  (check-equal? (leftmost '((potato) (chips ((with) fish) (chips))))
                'potato)
  (check-equal? (leftmost '(((hot) (tuna (and))) cheese))
                'hot)

  (check-true  (eqlist? '(strawberry ice cream)
                        '(strawberry ice cream)))
  (check-false (eqlist? '(strawberry ice cream)
                        '(strawberry cream ice)))
  (check-false (eqlist? '(banana ((split)))
                        '((banana) (split))))
  (check-false (eqlist? '(beef ((sausage)) (and (soda)))
                        '(beef ((salami))  (and (soda)))))
  (check-true  (eqlist? '(beef ((sausage)) (and (soda)))
                        '(beef ((sausage)) (and (soda)))))

  (check-true  (book-eqlist? '(strawberry ice cream)
                             '(strawberry ice cream)))
  (check-false (book-eqlist? '(strawberry ice cream)
                             '(strawberry cream ice)))
  (check-false (book-eqlist? '(banana ((split)))
                             '((banana) (split))))
  (check-false (book-eqlist? '(beef ((sausage)) (and (soda)))
                             '(beef ((salami))  (and (soda)))))
  (check-true  (book-eqlist? '(beef ((sausage)) (and (soda)))
                             '(beef ((sausage)) (and (soda)))))

  (check-true  (simple-eqlist? '(strawberry ice cream)
                               '(strawberry ice cream)))
  (check-false (simple-eqlist? '(strawberry ice cream)
                               '(strawberry cream ice)))
  (check-false (simple-eqlist? '(banana ((split)))
                               '((banana) (split))))
  (check-false (simple-eqlist? '(beef ((sausage)) (and (soda)))
                               '(beef ((salami))  (and (soda)))))
  (check-true  (simple-eqlist? '(beef ((sausage)) (and (soda)))
                               '(beef ((sausage)) (and (soda))))))

(test-case "Chapter 6"
  (check-true  (numbered? 1))
  (check-true  (numbered? '(3 + (4 ↑ 5))))
  (check-false (numbered? '(2 × sausage)))
  (check-equal? (value 13) 13)
  (check-equal? (value '(1 + 3)) 4)
  (check-equal? (value '(1 + (3 ↑ 4))) 82)
)
