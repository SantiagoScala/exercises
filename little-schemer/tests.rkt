#lang racket/base

(require "programs.rkt")
(require rackunit)

(test-case "Chapter 1"
  (check-true  (atom? 'atom))
  (check-true  (atom? 1492))
  (check-true  (atom? '*abc?))
  (check-false (atom? '()))
  (check-false (atom? '(1 2 3))))

(test-case "Chapter 2"
  (check-true  (lat? '(Jack Sprat could eat no chicken fat)))
  (check-false (lat? '((Jack) Sprat could eat no chicken fat)))
  (check-false (lat? '(Jack (Sprat could) eat no chicken fat)))
  (check-true  (lat? '()))

  (check-true  (member? 'tea     '(coffee tea or milk)))
  (check-false (member? 'poached '(fried eggs and scrambled eggs)))
  (check-true  (member? 'meat    '(mashed potatoes and meat gravy)))
  (check-false (member? 'liver   '(bagels and lox))))

(test-case "Chapter 3"
  (check-equal? (rember 'mint '(lamb chops and mint jelly))
                              '(lamb chops and      jelly))
  (check-equal? (rember 'mint '(lamb chops and mint flavored mint jelly))
                              '(lamb chops and      flavored mint jelly))
  (check-equal? (rember 'toast '(bacon lettuce and tomato))
                               '(bacon lettuce and tomato))
  (check-equal? (rember 'cup '(coffee cup tea cup and hick cup))
                             '(coffee     tea cup and hick cup))
  (check-equal? (rember 'and '(bacon lettuce and tomato))
                             '(bacon lettuce     tomato))

  (check-equal? (firsts '((apple peach pumpkin)
                          (plum pear cherry)
                          (grape raisin pea)
                          (bean carrot eggplant)))
                '(apple plum grape bean))
  (check-equal? (firsts '((a b) (c d) (e f)))
                        '( a     c     e   ))
  (check-equal? (firsts '()) '())
  (check-equal? (firsts '((five plums)
                          (four)
                          (eleven green oranges)))
                '(five four eleven))
  (check-equal? (firsts '(((five plums) four)
                          (eleven green oranges)
                          ((no) more)))
                '((five plums) eleven (no)))

  (check-equal? (insertR 'topping 'fudge '(ice cream with fudge         for dessert))
                                         '(ice cream with fudge topping for dessert))
  (check-equal? (insertR 'jalapeño 'and '(tacos tamales and          salsa))
                                        '(tacos tamales and jalapeño salsa))
  (check-equal? (insertR 'e 'd '(a b c d   f g d h))
                               '(a b c d e f g d h))

  (check-equal? (insertL 'e 'd '(a b c   d f g d h))
                               '(a b c e d f g d h))

  (check-equal? (subst 'e 'd '(a b c d f g d h))
                             '(a b c e f g d h))
  (check-equal? (subst 'topping 'fudge '(ice cream with fudge   for dessert))
                                       '(ice cream with topping for dessert))

  (check-equal? (subst2 'vanilla 'chocolate 'banana '(banana  ice cream with chocolate topping))
                                                    '(vanilla ice cream with chocolate topping))

  (check-equal? (multirember 'cup '(coffee cup tea cup and hick cup))
                                  '(coffee     tea     and hick    ))
  (check-equal? (multiinsertR 'e 'd '(a b c d   f g d   h))
                                    '(a b c d e f g d e h))
  (check-equal? (multiinsertL 'e 'd '(a b c   d f g   d h))
                                    '(a b c e d f g e d h))
  (check-equal? (multisubst 'e 'd '(a b c d f g d h))
                                  '(a b c e f g e h)))

(test-case "Chapter 4"
  (check-equal? (plus 46 12) 58)
  (check-equal? (minus 14 3) 11)
  (check-equal? (minus 17 9)  8)
  (check-equal? (addtup '(3 5 2 8)) 18)
  (check-equal? (addtup '(15 6 7 12 3)) 43)
  (check-equal? (× 5 3) 15)
  (check-equal? (× 13 4) 52)
  (check-equal? (× 12 3) 36)
  (check-equal? (tup+ '(3 6 9 11 4) '(8 5 2 0 7)) '(11 11 11 11 11))
  (check-equal? (tup+ '(2 3) '(4 6)) '(6 9))
  (check-equal? (tup+ '(3 7) '(4 6)) '(7 13))
  (check-equal? (tup+ '(3 7) '(4 6 8 1)) '(7 13 8 1))
  (check-equal? (tup+ '(3 7 8 1) '(4 6)) '(7 13 8 1))
  (check-false  (> 12 133))
  (check-true   (> 120 11))
  (check-false  (> 6 6))
  (check-true   (< 4 6))
  (check-false  (< 8 3))
  (check-false  (< 6 6))
  (check-equal? (↑ 1 1) 1)
  (check-equal? (↑ 2 3) 8)
  (check-equal? (↑ 5 3) 125)
  (check-equal? (÷ 15 4) 3)
  (check-equal? (length '(hotdogs with mustard sauerkraut and pickles)) 6)
  (check-equal? (length '(ham and cheese on rye)) 5)
  (check-equal? (pick 4 '(lasagna spaghetti ravioli macaroni meatball)) 'macaroni)
  (check-equal? (rempick 3 '(hotdogs with hot mustard)) '(hotdogs with mustard))
  (check-equal? (no-nums '(5 pears 6 prunes 9 dates)) '(pears prunes dates))
  (check-true   (eqan? 14 14))
  (check-false  (eqan? 13 15))
  (check-true   (eqan? 'b 'b))
  (check-false  (eqan? 'a 'c))
  (check-false  (eqan? 'x 10))
  (check-false  (eqan? 20 'y))
  (check-equal? (occur 5 '(5 a 1 b 2 c 3 d 5 e 5)) 3)
  (check-equal? (occur 5 '(x a 1 b 2 c 3 d x e x)) 0)
  (check-false  (one? 0))
  (check-true   (one? 1))
  (check-false  (one? 2))
  (check-equal? (one?-based-rempick 3 '(lemon meringue salty pie)) '(lemon meringue pie)))

(test-case "Chapter 5"
  (check-equal? (rember* 'cup '((coffee) cup ((tea) cup) (and (hick)) cup))
                              '((coffee)     ((tea)    ) (and (hick))    ))
  (check-equal? (rember* 'sauce '(((tomato sauce)) ((bean) sauce) (and ((flying)) sauce)))
                                '(((tomato      )) ((bean)      ) (and ((flying))      )))
  (check-equal? (insertR* 'roast 'chuck '((how much (wood))
                                          could
                                          ((a (wood) chuck))
                                          (((chuck)))
                                          (if (a) ((wood chuck)))
                                          could chuck wood))
                '((how much (wood))
                  could
                  ((a (wood) chuck roast))
                  (((chuck roast)))
                  (if (a) ((wood chuck roast)))
                  could chuck roast wood))
  (check-equal? (occur* 'banana '((banana)
                                  (split ((((banana ice)))
                                          (cream (banana))
                                          sherbet))
                                  (banana)
                                  (bread)
                                  (banana brandy)))
                5)
  (check-equal? (subst* 'orange 'banana '((banana)
                                          (split ((((banana ice)))
                                                  (cream (banana))
                                                  sherbet))
                                          (banana)
                                          (bread)
                                          (banana brandy)))
                '((orange)
                  (split ((((orange ice)))
                          (cream (orange))
                          sherbet))
                  (orange)
                  (bread)
                  (orange brandy)))
  (check-equal? (insertL* 'pecker 'chuck '((how much (wood))
                                           could
                                           ((a (wood) chuck))
                                           (((chuck)))
                                           (if (a) ((wood chuck)))
                                           could chuck wood))
                '((how much (wood))
                  could
                  ((a (wood) pecker chuck))
                  (((pecker chuck)))
                  (if (a) ((wood pecker chuck)))
                  could pecker chuck wood))
  (check-true  (member* 'chips '((potato) (chips ((with) fish) (chips)))))
  (check-false (member* 'abcde '((potato) (chips ((with) fish) (chips)))))
  (check-equal? (leftmost '((potato) (chips ((with) fish) (chips))))
                'potato)
  (check-equal? (leftmost '(((hot) (tuna (and))) cheese))
                'hot)

  (check-true  (eqlist? '(strawberry ice cream)
                        '(strawberry ice cream)))
  (check-false (eqlist? '(strawberry ice cream)
                        '(strawberry cream ice)))
  (check-false (eqlist? '(banana ((split)))
                        '((banana) (split))))
  (check-false (eqlist? '(beef ((sausage)) (and (soda)))
                        '(beef ((salami))  (and (soda)))))
  (check-true  (eqlist? '(beef ((sausage)) (and (soda)))
                        '(beef ((sausage)) (and (soda)))))

  (check-true  (book-eqlist? '(strawberry ice cream)
                             '(strawberry ice cream)))
  (check-false (book-eqlist? '(strawberry ice cream)
                             '(strawberry cream ice)))
  (check-false (book-eqlist? '(banana ((split)))
                             '((banana) (split))))
  (check-false (book-eqlist? '(beef ((sausage)) (and (soda)))
                             '(beef ((salami))  (and (soda)))))
  (check-true  (book-eqlist? '(beef ((sausage)) (and (soda)))
                             '(beef ((sausage)) (and (soda)))))

  (check-true  (simple-eqlist? '(strawberry ice cream)
                               '(strawberry ice cream)))
  (check-false (simple-eqlist? '(strawberry ice cream)
                               '(strawberry cream ice)))
  (check-false (simple-eqlist? '(banana ((split)))
                               '((banana) (split))))
  (check-false (simple-eqlist? '(beef ((sausage)) (and (soda)))
                               '(beef ((salami))  (and (soda)))))
  (check-true  (simple-eqlist? '(beef ((sausage)) (and (soda)))
                               '(beef ((sausage)) (and (soda))))))

(test-case "Chapter 6"
  (check-true  (numbered? 1))
  (check-true  (numbered? '(3 + (4 ↑ 5))))
  (check-false (numbered? '(2 × sausage)))
  (check-equal? (value 13) 13)
  (check-equal? (value '(1 + 3)) 4)
  (check-equal? (value '(1 + (3 ↑ 4))) 82)
  (check-equal? (1st-sub-exp '((3 * 4) + (5 ↑ 6))) '(3 * 4))
  (check-equal? (2nd-sub-exp '((3 * 4) + (5 ↑ 6))) '(5 ↑ 6)))

(test-case "Chapter 7"
  (check-false (set? '(apple peaches apple plum)))
  (check-true  (set? '(apples peaches pears plums)))
  (check-true  (set? '()))
  (check-false (set? '(apple 3 pear 4 9 apple 3 4)))
  (check-equal? (m-makeset '(apple peach pear peach plum apple lemon peach))
                           '(pear plum apple lemon peach))
  (check-equal? (mr-makeset '(apple peach pear peach plum apple lemon peach))
                            '(apple peach pear plum lemon))
  (check-true  (subset? '(5 chicken wings)
                        '(5 hamburgers 2 pieces fried chicken and light duckling wings)))
  (check-false (subset? '(4 pounds of horseradish)
                        '(four pounds chicken and 5 ounces horseradish)))
  (check-true  (eqset? '(6 large chickens with wings)
                       '(6 chickens with large wings)))
  (check-false (eqset? '(6 large chickens with wings)
                       '(6 chickens without large wings)))
  (check-true  (intersect? '(stewed tomatoes and macaroni)
                           '(macaroni and cheese)))
  (check-false (intersect? '(stewed tomatoes and macaroni)
                           '(hamburger or cheese)))
  (check eqset? (intersect '(stewed tomatoes and macaroni)
                           '(macaroni and cheese))
                '(and macaroni))
  (check eqset? (intersect '(stewed tomatoes and macaroni)
                           '(hamburger or cheese))
                '())
  (check eqset? (union '(stewed tomatoes and macaroni casserole)
                       '(macaroni and cheese))
                '(stewed tomatoes casserole macaroni and cheese))
  (check eqset? (intersectall '((a b c) (c a d e) (e f g h a b)))
                '(a))
  (check eqset? (intersectall '((6 pears and)
                                (3 peaches and 6 peppers)
                                (8 pears and 6 plums)
                                (and 6 prunes with some apples)))
                '(6 and))
  (check-true  (a-pair? '(pear pear)))
  (check-true  (a-pair? '(3 7)))
  (check-true  (a-pair? '((2) (pair))))
  (check-true  (a-pair? '(full (house))))
  (check-false (a-pair? '(1 2 3)))
  (check-false (a-pair? '(1)))
  (check-false (a-pair? '()))
  (check-false (a-pair? 10))
; (check-false (rel? '(apples peaches pumpkin pie)))
; (check-false (rel? '((apples peaches)
;                      (pumpkin pie)
;                      (apples peaches))))
; (check-true  (rel? '((apples peaches) (pumpkin pie))))
; (check-true  (rel? '((4 3) (4 2) (7 6) (6 2) (3 4))))
  (check-false (fun? '((4 3) (4 2) (7 6) (6 2) (3 4))))
  (check-true  (fun? '((8 3) (4 2) (7 6) (6 2) (3 4))))
  (check-false (fun? '((d 4) (b 0) (b 9) (e 5) (g 4))))
  (check-equal? (revrel '((8 a) (pumpkin pie) (got sick)))
                '((a 8) (pie pumpkin) (sick got)))
  (check-false (fullfun? '((8 3) (4 2) (7 6) (6 2) (3 4))))
  (check-true  (fullfun? '((8 3) (4 8) (7 6) (6 2) (3 4))))
  (check-false (fullfun? '((grape raisin)
                           (plum prune)
                           (stewed prune))))
  (check-true  (fullfun? '((grape raisin)
                           (plum prune)
                           (stewed grape)))))

(test-case "Chapter 8"
  (check-equal? (rember-f = 5 '(6 2 5 3))
                '(6 2 3))
  (check-equal? (rember-f eq? 'jelly '(jelly beans are good))
                '(beans are good))
  (check-equal? (rember-f equal? '(pop corn) '(lemonade (pop corn) and (cake)))
                '(lemonade and (cake)))
  (check-true  (eq?-salad 'salad))
  (check-false (eq?-salad 'tuna))
  (check-equal? (rember-eq? 'tuna '(tuna salad is good))
                '(salad is good))
  (check-equal? ((curried-rember-f eq?) 'tuna '(shrimp salad and tuna salad))
                '(shrimp salad and salad))
  (check-equal? ((curried-rember-f eq?) 'eq? '(equal? eq? eqan? eqlist? eqpair?))
                '(equal? eqan? eqlist? eqpair?))
  (check-equal? ((insertL-f eq?) 'e 'd '(a b c   d f g d h))
                                       '(a b c e d f g d h))
  (check-equal? ((insertR-f eq?) 'e 'd '(a b c d   f g d h))
                                       '(a b c d e f g d h))
  (check-equal? ((insert-g seqL) 'e 'd '(a b c   d f g d h))
                                       '(a b c e d f g d h))
  (check-equal? ((insert-g seqR) 'e 'd '(a b c d   f g d h))
                                       '(a b c d e f g d h))
  (check-equal? ((insert-g seqS) 'e 'd '(a b c d f g d h))
                                       '(a b c e f g d h))
  (check-equal? ((insert-g seqrem) #f 'd '(a b c d f g d h))
                                         '(a b c   f g d h))
  (check-equal? (atom-to-function (operator '(5 + 3)))
                plus)
  (check-equal? (value-rewritten '(1 + (3 ↑ 4))) 82)
  (check-equal? ((multirember-f eq?) 'tuna '(shrimp salad tuna salad and tuna))
                '(shrimp salad salad and))
  (check-equal? (multiremberT (eq?-c 'tuna) '(shrimp salad tuna salad and tuna))
                '(shrimp salad salad and))
  (check-true  (multirember&co 'tuna '()                                a-friend))
  (check-false (multirember&co 'tuna '(tuna)                            a-friend))
  (check-false (multirember&co 'tuna '(strawberries tuna and swordfish) a-friend))
  (check-equal? (multirember&co 'tuna '(strawberries tuna and swordfish) last-friend) 3)
  (check-equal? (multiinsertLR 'salty 'fish 'chips
                               '(chips       and       fish or       fish and chips))
                               '(chips salty and salty fish or salty fish and chips salty))
  (check-equal? (multiinsertLR&co 'salty 'fish 'chips
                                  '(chips       and       fish or       fish and chips)
                                  (λ (n l r) (length n)))
                11)
  (check-equal? (multiinsertLR&co 'salty 'fish 'chips
                                  '(chips       and       fish or       fish and chips)
                                  (λ (n l r) (list l r)))
                '(2 2))
  (check-true  (even? 0))
  (check-false (even? 1))
  (check-true  (even? 2))
  (check-false (even? 3))
  (check-true  (even? 4))
  (check-equal? (evens-only* '((9 1 2 8) 3 10 ((9 9) 7 6) 2))
                             '((    2 8)   10 ((   )   6) 2))

  (check-equal? (evens-only*&co '((9 1 2 8) 3 10 ((9 9) 7 6) 2) the-last-friend)
                '(38 1920 (2 8) 10 (() 6) 2)))


(test-case "Chapter 9"
  (check-true   (looking 'caviar '(6 2 4 caviar 5 7 3)))
  (check-false  (looking 'caviar '(6 2 grits caviar 5 7 3)))
  (check-equal? (shift '((a  b) c))
                       '( a (b  c)))
  (check-equal? (shift '((a  b) (c d)))
                       '( a (b  (c d))))
  (check-equal? (length* '((a  b) c )) 3)
  (check-equal? (length* '( a (b  c))) 3)
  (check-equal? (weight* '((a  b) c )) 5)
  (check-equal? (weight* '( a (b  c))) 4)
  (check-equal? (shuffle '(a (b c))) '(a (b c)))
  (check-equal? (shuffle '(a b))     '(a b))
  ;(check-equal? (shuffle '((a b) (c d))) ...)  ; Never finishes.
  (check-equal? (A 1 0) 2)
  (check-equal? (A 1 1) 3)
  (check-equal? (A 2 2) 7)

  (check-equal? (length0 '()) 0)

  (check-equal? (length≤1 '())  0)
  (check-equal? (length≤1 '(a)) 1)

  (check-equal? (length≤2 '())    0)
  (check-equal? (length≤2 '(a))   1)
  (check-equal? (length≤2 '(a a)) 2)

  (check-equal? (length≤1* '())  0)
  (check-equal? (length≤1* '(a)) 1)

  (check-equal? (length≤2* '())    0)
  (check-equal? (length≤2* '(a))   1)
  (check-equal? (length≤2* '(a a)) 2)

  (check-equal? (length0** '()) 0)

  (check-equal? (length≤1** '())  0)
  (check-equal? (length≤1** '(a)) 1)

  (check-equal? (length≤2** '())    0)
  (check-equal? (length≤2** '(a))   1)
  (check-equal? (length≤2** '(a a)) 2)

  (check-equal? (length0*** '()) 0)

  (check-equal? (length≤1*** '())  0)
  (check-equal? (length≤1*** '(a)) 1)

  (for ([f (in-list `(,length*** ,length**** ,length***** ,length-Y))])
    (check-equal? (f '())  0)
    (check-equal? (f '(a)) 1)
    (check-equal? (f '(a a a a a)) 5)
    (check-equal? (f '(a a a a a a
                       a a a a a a
                       a a a a a a)) 18)))

(test-case "Chapter 10"
  (define e '((appetizers entrée beverage)
              (food       tastes good)))
  (for ([lie (in-list (list lookup-in-entry lookup-in-entry*))])
    (check-equal? (lie 'appetizers e (λ (x) #f)) 'food)
    (check-equal? (lie 'dessert    e (λ (x) #f)) #f))

  (define env '(((entrée dessert)
                 (spaghetti spumoni))
                ((appetizer entrée beverage)
                 (food      tastes good))))

  (check-equal? (lookup-in-table 'snack    env (λ (x) #f)) #f)
  (check-equal? (lookup-in-table 'entrée   env (λ (x) #f)) 'spaghetti)
  (check-equal? (lookup-in-table 'beverage env (λ (x) #f)) 'good)

  (check-equal? (*const 41 '()) 41)
  (check-equal? (*const #t '()) #t)
  (check-equal? (*const #f '()) #f)
  (check-equal? (*const 'a '()) '(primitive a))

  (check-equal? (*quote '(quote a) '()) 'a)

  (check-equal? (*identifier 'entrée   env) 'spaghetti)
  (check-equal? (*identifier 'beverage env) 'good)

  (check-equal? (*lambda '(lambda (x) (* 2 x)) env) `(non-primitive (,env (x) (* 2 x))))

  (check-equal? (*cond '(cond (#t 1) (else 2)) env) 1)
  (check-equal? (*cond '(cond (#f 1) (else 2)) env) 2)

  (check-equal? (*application '(car (quote (99 88 77))) env) 99)
  (check-equal? (*application '(zero? x) '(((x) (9)))) #f)
  (check-equal? (*application '(zero? x) '(((x) (0)))) #t)

; (let ([e     '(cond (coffee klatsch) (else party))]
;       [table '(((coffee) (#t))
;                ((klatsch party) (5 (6))))])
;   (check-equal? (*cond e table) 'klatsch))

)

(displayln ":)")
